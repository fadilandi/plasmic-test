// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */
/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */
// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: 9HkzKEQcvqFJBsyMm4sqF8
// Component: lPZBKXW2mQ_c
import * as React from "react";
import { useRouter } from "next/router";
import {
  Stack as Stack__,
  classNames,
  createPlasmicElementProxy,
  deriveRenderOpts,
  renderPlasmicSlot,
  useCurrentUser
} from "@plasmicapp/react-web";
import { useDataEnv } from "@plasmicapp/react-web/lib/host";
import "@plasmicapp/react-web/lib/plasmic.css";
import plasmic_antd_5_hostless_css from "../antd_5_hostless/plasmic.module.css"; // plasmic-import: ohDidvG9XsCeFumugENU3J/projectcss
import plasmic_plasmic_rich_components_css from "../plasmic_rich_components/plasmic.module.css"; // plasmic-import: jkU633o1Cz7HrJdwdxhVHk/projectcss
import projectcss from "./plasmic.module.css"; // plasmic-import: 9HkzKEQcvqFJBsyMm4sqF8/projectcss
import sty from "./PlasmicMetricCard.module.css"; // plasmic-import: lPZBKXW2mQ_c/css

createPlasmicElementProxy;

export const PlasmicMetricCard__VariantProps = new Array();

export const PlasmicMetricCard__ArgProps = new Array(
  "children",
  "slot",
  "slot2"
);

const $$ = {};

function useNextRouter() {
  try {
    return useRouter();
  } catch {}
  return undefined;
}

function PlasmicMetricCard__RenderFunc(props) {
  const { variants, overrides, forNode } = props;
  const args = React.useMemo(
    () =>
      Object.assign(
        {},
        Object.fromEntries(
          Object.entries(props.args).filter(([_, v]) => v !== undefined)
        )
      ),
    [props.args]
  );
  const $props = {
    ...args,
    ...variants
  };
  const __nextRouter = useNextRouter();
  const $ctx = useDataEnv?.() || {};
  const refsRef = React.useRef({});
  const $refs = refsRef.current;
  const currentUser = useCurrentUser?.() || {};
  return (
    <Stack__
      as={"div"}
      data-plasmic-name={"root"}
      data-plasmic-override={overrides.root}
      data-plasmic-root={true}
      data-plasmic-for-node={forNode}
      hasGap={true}
      className={classNames(
        projectcss.all,
        projectcss.root_reset,
        projectcss.plasmic_default_styles,
        projectcss.plasmic_mixins,
        projectcss.plasmic_tokens,
        plasmic_antd_5_hostless_css.plasmic_tokens,
        plasmic_plasmic_rich_components_css.plasmic_tokens,
        sty.root
      )}
    >
      <h2
        data-plasmic-name={"h2"}
        data-plasmic-override={overrides.h2}
        className={classNames(projectcss.all, projectcss.h2, sty.h2)}
      >
        {renderPlasmicSlot({
          defaultContents: "128",
          value: args.children
        })}
      </h2>
      <h4
        data-plasmic-name={"h4"}
        data-plasmic-override={overrides.h4}
        className={classNames(projectcss.all, projectcss.h4, sty.h4)}
      >
        {renderPlasmicSlot({
          defaultContents: "Total Job Postings",
          value: args.slot
        })}
      </h4>
      {renderPlasmicSlot({
        defaultContents: "Jan 1, 2023 - June 30, 2023",
        value: args.slot2,
        className: classNames(sty.slotTargetSlot2)
      })}
    </Stack__>
  );
}

const PlasmicDescendants = {
  root: ["root", "h2", "h4"],
  h2: ["h2"],
  h4: ["h4"]
};

function makeNodeComponent(nodeName) {
  const func = function (props) {
    const { variants, args, overrides } = React.useMemo(
      () =>
        deriveRenderOpts(props, {
          name: nodeName,
          descendantNames: PlasmicDescendants[nodeName],
          internalArgPropNames: PlasmicMetricCard__ArgProps,
          internalVariantPropNames: PlasmicMetricCard__VariantProps
        }),
      [props, nodeName]
    );
    return PlasmicMetricCard__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicMetricCard";
  } else {
    func.displayName = `PlasmicMetricCard.${nodeName}`;
  }
  return func;
}

export const PlasmicMetricCard = Object.assign(
  // Top-level PlasmicMetricCard renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements
    h2: makeNodeComponent("h2"),
    h4: makeNodeComponent("h4"),
    // Metadata about props expected for PlasmicMetricCard
    internalVariantProps: PlasmicMetricCard__VariantProps,
    internalArgProps: PlasmicMetricCard__ArgProps
  }
);

export default PlasmicMetricCard;
/* prettier-ignore-end */
