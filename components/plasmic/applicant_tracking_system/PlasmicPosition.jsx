// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */
/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */
// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: 9HkzKEQcvqFJBsyMm4sqF8
// Component: twxjpCMDGn6T
import * as React from "react";
import Head from "next/head";
import { useRouter } from "next/router";
import {
  PlasmicDataSourceContextProvider as PlasmicDataSourceContextProvider__,
  PlasmicPageGuard as PlasmicPageGuard__,
  classNames,
  createPlasmicElementProxy,
  deriveRenderOpts,
  generateOnMutateForSpec,
  generateStateOnChangePropForCodeComponents,
  generateStateValueProp,
  initializeCodeComponentStates,
  useCurrentUser,
  useDollarState
} from "@plasmicapp/react-web";
import {
  DataCtxReader as DataCtxReader__,
  useDataEnv
} from "@plasmicapp/react-web/lib/host";
import * as plasmicAuth from "@plasmicapp/react-web/lib/auth";
import { usePlasmicDataSourceContext } from "@plasmicapp/data-sources-context";
import {
  executePlasmicDataOp,
  usePlasmicDataOp,
  usePlasmicInvalidate
} from "@plasmicapp/react-web/lib/data-sources";
import PageLayout from "../../PageLayout"; // plasmic-import: zZGps3RDKU3u/component
import { AntdButton } from "@plasmicpkgs/antd5/skinny/registerButton";
import Card from "../../Card"; // plasmic-import: rkseNkAe3dY4/component
import { RichDetails } from "@plasmicpkgs/plasmic-rich-components/skinny/rich-details";
import { RichTable } from "@plasmicpkgs/plasmic-rich-components/skinny/rich-table";
import { tableHelpers as RichTable_Helpers } from "@plasmicpkgs/plasmic-rich-components/skinny/rich-table";
import "@plasmicapp/react-web/lib/plasmic.css";
import plasmic_antd_5_hostless_css from "../antd_5_hostless/plasmic.module.css"; // plasmic-import: ohDidvG9XsCeFumugENU3J/projectcss
import plasmic_plasmic_rich_components_css from "../plasmic_rich_components/plasmic.module.css"; // plasmic-import: jkU633o1Cz7HrJdwdxhVHk/projectcss
import projectcss from "./plasmic.module.css"; // plasmic-import: 9HkzKEQcvqFJBsyMm4sqF8/projectcss
import sty from "./PlasmicPosition.module.css"; // plasmic-import: twxjpCMDGn6T/css

createPlasmicElementProxy;

export const PlasmicPosition__VariantProps = new Array();

export const PlasmicPosition__ArgProps = new Array();

const $$ = {};

function useNextRouter() {
  try {
    return useRouter();
  } catch {}
  return undefined;
}

function PlasmicPosition__RenderFunc(props) {
  const { variants, overrides, forNode } = props;
  const args = React.useMemo(
    () =>
      Object.assign(
        {},
        Object.fromEntries(
          Object.entries(props.args).filter(([_, v]) => v !== undefined)
        )
      ),
    [props.args]
  );
  const $props = {
    ...args,
    ...variants
  };
  const __nextRouter = useNextRouter();
  const $ctx = useDataEnv?.() || {};
  const refsRef = React.useRef({});
  const $refs = refsRef.current;
  const currentUser = useCurrentUser?.() || {};
  let [$queries, setDollarQueries] = React.useState({});
  const stateSpecs = React.useMemo(
    () => [
      {
        path: "table.selectedRowKey",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined,
        onMutate: generateOnMutateForSpec("selectedRowKey", RichTable_Helpers)
      },
      {
        path: "table.selectedRow",
        type: "private",
        variableType: "object",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined,
        onMutate: generateOnMutateForSpec("selectedRow", RichTable_Helpers)
      },
      {
        path: "table.selectedRows",
        type: "private",
        variableType: "array",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined,
        onMutate: generateOnMutateForSpec("selectedRows", RichTable_Helpers)
      },
      {
        path: "table.selectedRowKeys",
        type: "private",
        variableType: "array",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined,
        onMutate: generateOnMutateForSpec("selectedRowKeys", RichTable_Helpers)
      }
    ],

    [$props, $ctx, $refs]
  );
  const $state = useDollarState(stateSpecs, {
    $props,
    $ctx,
    $queries: $queries,
    $refs
  });
  const dataSourcesCtx = usePlasmicDataSourceContext();
  const plasmicInvalidate = usePlasmicInvalidate();
  const new$Queries = {
    position: usePlasmicDataOp(() => {
      return {
        sourceId: "vmy97NddY5rLFxdCRZeuG1",
        opId: "155da0d4-889f-405f-afb5-8ac5bf2691f5",
        userArgs: {
          filters: [$ctx.params.id]
        },
        cacheKey: `plasmic.$.155da0d4-889f-405f-afb5-8ac5bf2691f5.$.`,
        invalidatedKeys: null,
        roleId: "2eac6506-8c2e-4128-9b96-09dc393bc009"
      };
    }),
    candidates: usePlasmicDataOp(() => {
      return {
        sourceId: "vmy97NddY5rLFxdCRZeuG1",
        opId: "e5d78ae9-d96f-4bcb-a0f7-2fb0a153a4b7",
        userArgs: {
          filters: [$ctx.params.id]
        },
        cacheKey: `plasmic.$.e5d78ae9-d96f-4bcb-a0f7-2fb0a153a4b7.$.`,
        invalidatedKeys: null,
        roleId: "2eac6506-8c2e-4128-9b96-09dc393bc009"
      };
    })
  };
  if (Object.keys(new$Queries).some(k => new$Queries[k] !== $queries[k])) {
    setDollarQueries(new$Queries);
    $queries = new$Queries;
  }
  return (
    <React.Fragment>
      <Head>
        <meta name="twitter:card" content="summary" />
        <title key="title">{PlasmicPosition.pageMetadata.title}</title>
        <meta
          key="og:title"
          property="og:title"
          content={PlasmicPosition.pageMetadata.title}
        />

        <meta
          key="twitter:title"
          name="twitter:title"
          content={PlasmicPosition.pageMetadata.title}
        />
      </Head>

      <style>{`
        body {
          margin: 0;
        }
      `}</style>

      <div className={projectcss.plasmic_page_wrapper}>
        <div
          data-plasmic-name={"root"}
          data-plasmic-override={overrides.root}
          data-plasmic-root={true}
          data-plasmic-for-node={forNode}
          className={classNames(
            projectcss.all,
            projectcss.root_reset,
            projectcss.plasmic_default_styles,
            projectcss.plasmic_mixins,
            projectcss.plasmic_tokens,
            plasmic_antd_5_hostless_css.plasmic_tokens,
            plasmic_plasmic_rich_components_css.plasmic_tokens,
            sty.root
          )}
        >
          <PageLayout
            data-plasmic-name={"pageLayout"}
            data-plasmic-override={overrides.pageLayout}
          >
            <DataCtxReader__>
              {$ctx => (
                <section
                  data-plasmic-name={"section"}
                  data-plasmic-override={overrides.section}
                  className={classNames(projectcss.all, sty.section)}
                >
                  <div
                    data-plasmic-name={"freeBox"}
                    data-plasmic-override={overrides.freeBox}
                    className={classNames(projectcss.all, sty.freeBox)}
                  >
                    <h1
                      data-plasmic-name={"h1"}
                      data-plasmic-override={overrides.h1}
                      className={classNames(
                        projectcss.all,
                        projectcss.h1,
                        projectcss.__wab_text,
                        sty.h1
                      )}
                    >
                      <React.Fragment>
                        {(() => {
                          try {
                            return $queries.position.data[0].title;
                          } catch (e) {
                            if (
                              e instanceof TypeError ||
                              e?.plasmicType === "PlasmicUndefinedDataError"
                            ) {
                              return "Position title";
                            }
                            throw e;
                          }
                        })()}
                      </React.Fragment>
                    </h1>
                    <AntdButton
                      data-plasmic-name={"button"}
                      data-plasmic-override={overrides.button}
                      className={classNames("__wab_instance", sty.button)}
                      onClick={async () => {
                        const $steps = {};
                        $steps["tutorialdbUpdateMany"] = true
                          ? (() => {
                              const actionArgs = {
                                dataOp: {
                                  sourceId: "vmy97NddY5rLFxdCRZeuG1",
                                  opId: "70d2a539-c947-4712-a78a-9eb4e22edc04",
                                  userArgs: {
                                    conditions: [$ctx.params.id]
                                  },
                                  cacheKey: null,
                                  invalidatedKeys: ["plasmic_refresh_all"],
                                  roleId: "2eac6506-8c2e-4128-9b96-09dc393bc009"
                                }
                              };
                              return (async ({ dataOp, continueOnError }) => {
                                try {
                                  const response = await executePlasmicDataOp(
                                    dataOp,
                                    {
                                      userAuthToken:
                                        dataSourcesCtx?.userAuthToken,
                                      user: dataSourcesCtx?.user
                                    }
                                  );
                                  await plasmicInvalidate(
                                    dataOp.invalidatedKeys
                                  );
                                  return response;
                                } catch (e) {
                                  if (!continueOnError) {
                                    throw e;
                                  }
                                  return e;
                                }
                              })?.apply(null, [actionArgs]);
                            })()
                          : undefined;
                        if (
                          $steps["tutorialdbUpdateMany"] != null &&
                          typeof $steps["tutorialdbUpdateMany"] === "object" &&
                          typeof $steps["tutorialdbUpdateMany"].then ===
                            "function"
                        ) {
                          $steps["tutorialdbUpdateMany"] = await $steps[
                            "tutorialdbUpdateMany"
                          ];
                        }
                      }}
                    >
                      <div
                        data-plasmic-name={"text"}
                        data-plasmic-override={overrides.text}
                        className={classNames(
                          projectcss.all,
                          projectcss.__wab_text,
                          sty.text
                        )}
                      >
                        {"Archive"}
                      </div>
                    </AntdButton>
                  </div>
                  <Card
                    className={classNames("__wab_instance", sty.card__lqWoM)}
                    noTitle={true}
                  >
                    <RichDetails
                      data-plasmic-name={"dataDetails"}
                      data-plasmic-override={overrides.dataDetails}
                      bordered={true}
                      className={classNames("__wab_instance", sty.dataDetails)}
                      column={1}
                      data={(() => {
                        try {
                          return $queries.position;
                        } catch (e) {
                          if (
                            e instanceof TypeError ||
                            e?.plasmicType === "PlasmicUndefinedDataError"
                          ) {
                            return undefined;
                          }
                          throw e;
                        }
                      })()}
                      fields={(() => {
                        const __composite = [
                          { key: "dept", fieldId: "dept" },
                          { key: "id", fieldId: "id", isHidden: null },
                          { key: "title", fieldId: "title", isHidden: null },
                          { key: "description", fieldId: "description" },
                          {
                            key: "department_id",
                            fieldId: "department_id",
                            isHidden: null
                          },
                          { key: "archived", fieldId: "archived" },
                          { key: "created_at", fieldId: "created_at" }
                        ];

                        __composite["1"]["isHidden"] = true;
                        __composite["2"]["isHidden"] = true;
                        __composite["4"]["isHidden"] = true;
                        return __composite;
                      })()}
                    />
                  </Card>
                  <Card
                    className={classNames("__wab_instance", sty.card___71Kn)}
                    title={
                      <h4
                        data-plasmic-name={"h4"}
                        data-plasmic-override={overrides.h4}
                        className={classNames(
                          projectcss.all,
                          projectcss.h4,
                          projectcss.__wab_text,
                          sty.h4
                        )}
                      >
                        {"Candidates"}
                      </h4>
                    }
                  >
                    {(() => {
                      const child$Props = {
                        className: classNames("__wab_instance", sty.table),
                        data: (() => {
                          try {
                            return $queries.candidates;
                          } catch (e) {
                            if (
                              e instanceof TypeError ||
                              e?.plasmicType === "PlasmicUndefinedDataError"
                            ) {
                              return undefined;
                            }
                            throw e;
                          }
                        })(),
                        fields: (() => {
                          const __composite = [
                            { key: "id", fieldId: "id", isHidden: null },
                            { key: "name", fieldId: "name" },
                            { key: "email", fieldId: "email" },
                            { key: "phone", fieldId: "phone" },
                            {
                              key: "position_id",
                              fieldId: "position_id",
                              isHidden: null
                            },
                            { key: "resume_url", fieldId: "resume_url" },
                            { key: "notes", fieldId: "notes" },
                            { key: "status", fieldId: "status" },
                            { key: "created_at", fieldId: "created_at" }
                          ];

                          __composite["0"]["isHidden"] = true;
                          __composite["4"]["isHidden"] = true;
                          return __composite;
                        })(),
                        onRowSelectionChanged: async (...eventArgs) => {
                          generateStateOnChangePropForCodeComponents(
                            $state,
                            "selectedRowKey",
                            ["table", "selectedRowKey"],
                            RichTable_Helpers
                          ).apply(null, eventArgs);
                          generateStateOnChangePropForCodeComponents(
                            $state,
                            "selectedRow",
                            ["table", "selectedRow"],
                            RichTable_Helpers
                          ).apply(null, eventArgs);
                          generateStateOnChangePropForCodeComponents(
                            $state,
                            "selectedRows",
                            ["table", "selectedRows"],
                            RichTable_Helpers
                          ).apply(null, eventArgs);
                          generateStateOnChangePropForCodeComponents(
                            $state,
                            "selectedRowKeys",
                            ["table", "selectedRowKeys"],
                            RichTable_Helpers
                          ).apply(null, eventArgs);
                        },
                        scopeClassName: sty["table__instance"],
                        selectedRowKey: generateStateValueProp($state, [
                          "table",
                          "selectedRowKey"
                        ]),
                        selectedRowKeys: generateStateValueProp($state, [
                          "table",
                          "selectedRowKeys"
                        ]),
                        themeResetClassName: classNames(
                          projectcss.root_reset,
                          projectcss.root_reset_tags,
                          projectcss.plasmic_default_styles,
                          projectcss.plasmic_mixins,
                          projectcss.plasmic_tokens,
                          plasmic_antd_5_hostless_css.plasmic_tokens,
                          plasmic_plasmic_rich_components_css.plasmic_tokens
                        )
                      };
                      initializeCodeComponentStates(
                        $state,
                        [
                          {
                            name: "selectedRowKey",
                            plasmicStateName: "table.selectedRowKey"
                          },
                          {
                            name: "selectedRow",
                            plasmicStateName: "table.selectedRow"
                          },
                          {
                            name: "selectedRows",
                            plasmicStateName: "table.selectedRows"
                          },
                          {
                            name: "selectedRowKeys",
                            plasmicStateName: "table.selectedRowKeys"
                          }
                        ],

                        [],
                        RichTable_Helpers ?? {},
                        child$Props
                      );
                      return (
                        <RichTable
                          data-plasmic-name={"table"}
                          data-plasmic-override={overrides.table}
                          {...child$Props}
                        />
                      );
                    })()}
                  </Card>
                </section>
              )}
            </DataCtxReader__>
          </PageLayout>
        </div>
      </div>
    </React.Fragment>
  );
}

const PlasmicDescendants = {
  root: [
    "root",
    "pageLayout",
    "section",
    "freeBox",
    "h1",
    "button",
    "text",
    "dataDetails",
    "h4",
    "table"
  ],

  pageLayout: [
    "pageLayout",
    "section",
    "freeBox",
    "h1",
    "button",
    "text",
    "dataDetails",
    "h4",
    "table"
  ],

  section: [
    "section",
    "freeBox",
    "h1",
    "button",
    "text",
    "dataDetails",
    "h4",
    "table"
  ],

  freeBox: ["freeBox", "h1", "button", "text"],
  h1: ["h1"],
  button: ["button", "text"],
  text: ["text"],
  dataDetails: ["dataDetails"],
  h4: ["h4"],
  table: ["table"]
};

function makeNodeComponent(nodeName) {
  const func = function (props) {
    const { variants, args, overrides } = React.useMemo(
      () =>
        deriveRenderOpts(props, {
          name: nodeName,
          descendantNames: PlasmicDescendants[nodeName],
          internalArgPropNames: PlasmicPosition__ArgProps,
          internalVariantPropNames: PlasmicPosition__VariantProps
        }),
      [props, nodeName]
    );
    return PlasmicPosition__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicPosition";
  } else {
    func.displayName = `PlasmicPosition.${nodeName}`;
  }
  return func;
}

function withPlasmicPageGuard(WrappedComponent) {
  const PageGuard = props => (
    <PlasmicPageGuard__
      minRole={"2eac6506-8c2e-4128-9b96-09dc393bc009"}
      appId={"9HkzKEQcvqFJBsyMm4sqF8"}
      authorizeEndpoint={"https://studio.plasmic.app/authorize"}
      canTriggerLogin={true}
    >
      <WrappedComponent {...props} />
    </PlasmicPageGuard__>
  );

  return PageGuard;
}

function withUsePlasmicAuth(WrappedComponent) {
  const WithUsePlasmicAuthComponent = props => {
    const dataSourceCtx = usePlasmicDataSourceContext() ?? {};
    const { isUserLoading, user, token } = plasmicAuth.usePlasmicAuth({
      appId: "9HkzKEQcvqFJBsyMm4sqF8"
    });
    return (
      <PlasmicDataSourceContextProvider__
        value={{
          ...dataSourceCtx,
          isUserLoading,
          userAuthToken: token,
          user
        }}
      >
        <WrappedComponent {...props} />
      </PlasmicDataSourceContextProvider__>
    );
  };
  return WithUsePlasmicAuthComponent;
}

export const PlasmicPosition = Object.assign(
  // Top-level PlasmicPosition renders the root element
  withUsePlasmicAuth(withPlasmicPageGuard(makeNodeComponent("root"))),
  {
    // Helper components rendering sub-elements
    pageLayout: makeNodeComponent("pageLayout"),
    section: makeNodeComponent("section"),
    freeBox: makeNodeComponent("freeBox"),
    h1: makeNodeComponent("h1"),
    button: makeNodeComponent("button"),
    text: makeNodeComponent("text"),
    dataDetails: makeNodeComponent("dataDetails"),
    h4: makeNodeComponent("h4"),
    table: makeNodeComponent("table"),
    // Metadata about props expected for PlasmicPosition
    internalVariantProps: PlasmicPosition__VariantProps,
    internalArgProps: PlasmicPosition__ArgProps,
    // Page metadata
    pageMetadata: {
      title: "Position",
      description: "",
      ogImageSrc: "",
      canonical: ""
    }
  }
);

export default PlasmicPosition;
/* prettier-ignore-end */
